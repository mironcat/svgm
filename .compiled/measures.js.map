{"version":3,"sources":["../lib/measures.js"],"names":["MTYPE","getProps","item","scalefactor","SVG","labels","getLabels","label","type","attributes","attr","id","el","measures","getMeasures","desc","select","node","members","title","textContent","labeltext","arr","split","labelvalue","idtext","itemtype","setchars","rect","ellipse","circle","path","line","text","image","g","defchars","measure","strat","chars","matchArr","length","forEach","ch","a1","a2","idx","matchingElements","i","indexOf","push","char","value","x","cx","y","cy","width","height","points","array","point1","point2","dist","y2","R","Math","PI","arrayPoints","numberOfPoints","point","calcPathArea","calcPathAngle","childNodes","tspan","d","t","filepath","area","count","children","x1","x2","y1","sqrt","polyArea","poly","pts","len","numberOfItems","p1","getItem","p2","abs","pathToPolygonViaSubdivision","threshold","segments","subdivide","ptWithLength","getTotalLength","doc","ownerDocument","createElementNS","setAttribute","join","pt","getPointAtLength","step","result","mids","pop","concat"],"mappings":"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","sourcesContent":["/**\r\n * svgm\r\n * https://github.com/mironcat/svgm\r\n *\r\n * Copyright (c) 2018 mironcat\r\n * Licensed under the MIT license.\r\n */\r\n'use strict';\r\nconst MTYPE='measure';\r\nfunction getProps(item, scalefactor, SVG) {\r\n    // body...\r\n    let labels = getLabels(item);\r\n    let label = labels.label;\r\n    if (label === 'scalebar') return label;\r\n    let type = item.type;\r\n    let attributes = item.attr();\r\n    let id = attributes['id'];\r\n    let el = {\r\n        type,\r\n        id,\r\n        label\r\n    };\r\n    let measures = getMeasures(item, id, scalefactor, SVG);\r\n    if (measures) el.measures = measures;\r\n\r\n    let desc = SVG.select('desc', item.node).members[0];\r\n    let title = SVG.select('title', item.node).members[0];\r\n    if (desc) el.desc = desc.node.textContent;\r\n    if (title) {\r\n        //console.log(title);\r\n        el.title = title.node.textContent;\r\n    }\r\n\r\n    //debugger;\r\n    return el;\r\n}\r\nfunction getLabels(item) {\r\n    // body...\r\n\r\n    let attributes = item.attr();\r\n    // debugger;\r\n    let labeltext = attributes['inkscape:label'];\r\n    if (!labeltext)\r\n        return {\r\n            label: attributes['id']\r\n        };\r\n    let arr = labeltext.split('=');\r\n    /*    if (arr.length) {arr = labeltext.split('-')}*/\r\n\r\n    let label = arr[0],\r\n        labelvalue = arr[1];\r\n    return {\r\n        label,\r\n        labelvalue\r\n    };\r\n}\r\nfunction getMeasures(item, idtext, scalefactor, SVG) {\r\n    let itemtype = item.type;\r\n    let arr = idtext.split('-');\r\n    //получаем массив символов измерений\r\n    const setchars = {\r\n        rect: ['w', 'h', 'area', 'p', 'c'],\r\n        ellipse: ['area', 'w', 'h', 'p', 'c'],\r\n        circle: ['area', 'w', 'h', 'c', 'diameter'],\r\n        path: ['area', 'l', 'h', 'angle'],\r\n        line: ['l', 'h'],\r\n        text: ['t', 'y'],\r\n        image: ['file', 'folder'],\r\n        g: ['count', 'd', 'area']\r\n    };\r\n    //все возможные символы измерений\r\n    const defchars = {\r\n        measure: {\r\n            rect: ['w', 'h'],\r\n            ellipse: ['w', 'h'],\r\n            circle: ['diameter'],\r\n            path: ['l'],\r\n            line: ['l'],\r\n            text: ['t'],\r\n            image: ['file', 'folder'],\r\n            g: ['count', 'd']\r\n        },\r\n        strat: {\r\n            ellipse: ['c'],\r\n            circle: ['c'],\r\n            line: ['h', 'start'],\r\n            path: ['h', 'start'],\r\n            text: ['t', 'y'],\r\n            g: ['count']\r\n        }\r\n    };\r\n    //измерения по умолчанию\r\n\r\n    if (!setchars[itemtype]) return false;\r\n    // если тип элемента неопределен, выходим\r\n\r\n    let chars = matchArr(arr, setchars[itemtype], itemtype);\r\n    //if (itemtype='g') {debugger;}\r\n    if (chars.length === 0) chars = defchars[MTYPE][itemtype];\r\n    //измерения по умолчанию\r\n    // если тип элемента неопределен, выходим\r\n    if (!chars) return false;\r\n\r\n    let measures = {};\r\n    chars.forEach((ch) => {\r\n        measures[ch] = measure(item, itemtype + \"-\" + ch, scalefactor, SVG);\r\n        //measures.push(measure(item, ch));\r\n    });\r\n    //debugger;\r\n    return measures;\r\n    function matchArr(a1, a2) {\r\n        //совпадающие элементы массивов\r\n        let idx = 0,\r\n            matchingElements = [];\r\n        for (let i = 0; i < a2.length; i++) {\r\n            idx = a1.indexOf(a2[i]);\r\n            if (idx >= 0) matchingElements.push(a1[idx]);\r\n        }\r\n        return matchingElements;\r\n    }\r\n}\r\nfunction measure(item, char, scalefactor, SVG) {\r\n    let attributes = item.attr();\r\n    var value = 0;\r\n    switch (char) {\r\n        case 'ellipse-c':\r\n            value = { x: item.cx() / scalefactor, y: item.cy() / scalefactor };\r\n            break;\r\n        case 'ellipse-w':\r\n            value = item.width() / scalefactor;\r\n            break;\r\n        case 'ellipse-h':\r\n            value = item.height() / scalefactor;\r\n            break;\r\n        case 'line-l':\r\n            var points = item.array().value;\r\n            var point1 = points[0];\r\n            var point2 = points[1];\r\n            value = dist(point1, point2) / scalefactor;\r\n            // debugger;\r\n            break;\r\n        case 'line-h':\r\n            var points = item.array().value;\r\n            var point1 = points[0];\r\n            var point2 = points[1];\r\n            value = dist(point1, point2) / scalefactor;\r\n            // debugger;\r\n            break;\r\n        case 'line-start':\r\n            var x = item.attr('x1'),\r\n                y = item.attr('y1'),\r\n                y2 = item.attr('y2');\r\n            debugger;\r\n            if (y2 > y) y = y2;\r\n            value = { x, y };\r\n            break;\r\n        case 'circle-c':\r\n            value = { x: item.cx() / scalefactor, y: item.cy() / scalefactor };\r\n            break;\r\n        case 'circle-diameter' || 'circle-h':\r\n            value = item.height() / scalefactor;\r\n            //  debugger;\r\n            break;\r\n        case 'rect-start':\r\n            value = { x: item.x() / scalefactor, y: item.y() / scalefactor };\r\n            break;\r\n        case 'rect-c':\r\n            value = { x: item.cx() / scalefactor, y: item.cy() / scalefactor };\r\n            break;\r\n        case 'rect-area':\r\n            value =\r\n                (attributes.width * attributes.height) / (scalefactor * scalefactor);\r\n            //debugger;\r\n            break;\r\n        case 'rect-l':\r\n            value = attributes.height / scalefactor;\r\n            break;\r\n        case 'rect-w':\r\n            value = item.width() / scalefactor;\r\n            break;\r\n        case 'rect-h':\r\n            value = item.height() / scalefactor;\r\n            break;\r\n        case 'circle-area':\r\n            var R = item.height() / 2;\r\n            value = (Math.PI * (R * R)) / (scalefactor * scalefactor);\r\n            break;\r\n        case 'path-start':\r\n            arrayPoints = item.array().value;\r\n            var y = arrayPoints[0][2],\r\n                x = 0,\r\n                numberOfPoints = arrayPoints.length;\r\n            arrayPoints.forEach((point) => {\r\n                // body...\r\n                if (y < point[2]) y = point[2];\r\n                x = x + point[1];\r\n            });\r\n            x /= numberOfPoints;\r\n            value = { x: x / scalefactor, y: y / scalefactor };\r\n            // debugger;\r\n            break;\r\n        case 'path-h':\r\n            value = item.length() / scalefactor;\r\n            break;\r\n        case 'path-area' || 'ellipse-area' || 'circle-area':\r\n            value = calcPathArea(item.node) / (scalefactor * scalefactor);\r\n            break;\r\n        case 'path-l':\r\n            value = item.length() / scalefactor;\r\n            // debugger;\r\n            break;\r\n        case 'path-anlge':\r\n            debugger;\r\n            value = calcPathAngle(item.node) / scalefactor;\r\n            break;\r\n        case 'text-t':\r\n            if (item.node.childNodes.length > 1) {\r\n                let tspan = SVG.select('tspan', item.node).members[0].node.textContent;\r\n                let d = SVG.select('desc', item.node).members[0];\r\n                let t = SVG.select('title', item.node).members[0];\r\n                let desc = '',\r\n                    title = '';\r\n                if (d) desc = '-' + d.node.textContent;\r\n                if (t) title = '-' + t.node.textContent;\r\n                var value = tspan + title + desc;\r\n            } else {\r\n                var value = item.text();\r\n            }\r\n\r\n            //debugger;\r\n            break;\r\n        case 'text-y':\r\n            value = item.attr('y') / scalefactor;\r\n            //  debugger;\r\n            break;\r\n        case 'image-file':\r\n            var filepath = attributes['xlink:href'].split('/');\r\n            value = filepath[filepath.length - 1].split('.')[0];\r\n            break;\r\n        case 'image-folder':\r\n            var filepath = attributes['xlink:href'].split('/');\r\n            value = filepath[filepath.length - 2];\r\n            break;\r\n        case 'g-d':\r\n            //debugger;\r\n            var rect = item.select('rect').members[0];\r\n            if (rect) {\r\n                let attr = rect.attr();\r\n                var area = (attr.width * attr.height) / (scalefactor * scalefactor);\r\n            }\r\n            var count = item.children().length - 1;\r\n            value = count / area;\r\n            break;\r\n        case 'g-count':\r\n            //debugger;\r\n            value = item.children().length - 1;\r\n            break;\r\n        default:\r\n    }\r\n\r\n    // return обект с измерением и его типом\r\n    if (value) {\r\n        return value;\r\n    } else {\r\n        return 'нет измерений';\r\n    }\r\n}\r\n//----------------------- Line length-------------------------------------\r\nfunction dist(point1, point2) {\r\n    let x1 = point1[0],\r\n        x2 = point2[0];\r\n    let y1 = point1[1],\r\n        y2 = point2[1];\r\n    return Math.sqrt((x2 -= x1) * x2 + (y2 -= y1) * y2);\r\n}\r\n//----------------------- AREA-------------------------------------\r\nfunction calcPathArea(path) {\r\n    // calculate area from outline path...\r\n    function polyArea(poly) {\r\n        let area = 0,\r\n            pts = poly.points,\r\n            len = pts.numberOfItems;\r\n        for (let i = 0; i < len; ++i) {\r\n            let p1 = pts.getItem(i),\r\n                p2 = pts.getItem((i + len - 1) % len);\r\n            area += (p2.x + p1.x) * (p2.y - p1.y);\r\n        }\r\n        return Math.abs(area / 2);\r\n    }\r\n    let poly = pathToPolygonViaSubdivision(path, 0);\r\n    let numberOfItems = poly.points.numberOfItems;\r\n    return polyArea(poly);\r\n}\r\n// path:      an SVG <path> element\r\n// threshold: a 'close-enough' limit (ignore subdivisions with area less than this)\r\n// segments:  (optional) how many segments to subdivisions to create at each level\r\n// returns:   a new SVG <polygon> element\r\nfunction pathToPolygonViaSubdivision(path, threshold, segments) {\r\n    if (!threshold) threshold = 0.0001; // Get really, really close\r\n    if (!segments) segments = 3; // 2 segments creates 0-area triangles\r\n\r\n    let points = subdivide(ptWithLength(0), ptWithLength(path.getTotalLength()));\r\n\r\n    for (let i = points.length; i--;) points[i] = [points[i].x, points[i].y];\r\n\r\n    let doc = path.ownerDocument;\r\n    let poly = doc.createElementNS('http://www.w3.org/2000/svg', 'polygon');\r\n    poly.setAttribute('points', points.join(' '));\r\n    return poly;\r\n\r\n    // Record the distance along the path with the point for later reference\r\n    function ptWithLength(d) {\r\n        let pt = path.getPointAtLength(d);\r\n        pt.d = d;\r\n        return pt;\r\n    }\r\n\r\n    // Create segments evenly spaced between two points on the path.\r\n    // If the area of the result is less than the threshold return the endpoints.\r\n    // Otherwise, keep the intermediary points and subdivide each consecutive pair.\r\n    function subdivide(p1, p2) {\r\n        let pts = [p1];\r\n        for (var i = 1, step = (p2.d - p1.d) / segments; i < segments; i++) {\r\n            pts[i] = ptWithLength(p1.d + step * i);\r\n        }\r\n        pts.push(p2);\r\n        if (polyArea(pts) <= threshold) return [p1, p2];\r\n        else {\r\n            let result = [];\r\n            for (var i = 1; i < pts.length; ++i) {\r\n                let mids = subdivide(pts[i - 1], pts[i]);\r\n                mids.pop(); // We'll get the last point as the start of the next pair\r\n                result = result.concat(mids);\r\n            }\r\n            result.push(p2);\r\n            return result;\r\n        }\r\n    }\r\n\r\n    // Calculate the area of an polygon represented by an array of points\r\n    function polyArea(points) {\r\n        // debugger;\r\n        let p1, p2;\r\n        for (var area = 0, len = points.length, i = 0; i < len; ++i) {\r\n            p1 = points[i];\r\n            p2 = points[(i - 1 + len) % len]; // Previous point, with wraparound\r\n            area += (p2.x + p1.x) * (p2.y - p1.y);\r\n        }\r\n        return Math.abs(area / 2);\r\n    }\r\n}\r\nexport { getProps, getLabels, dist };"],"file":"measures.js"}