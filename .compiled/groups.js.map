{"version":3,"sources":["../lib/groups.js"],"names":["getGroups","SVG","paths","select","members","scalebars","scalebarIteration","rects","rectscalebars","concat","lines","linescalebars","groups","forEach","scalebar","group","item","parent","push","scalefactor","items","scalebarFinder","scalefactorConstructor","path","scalebarvalue","d","node","getAttribute","z","indexOf","length","alert","line","points","array","value","point1","point2","dist","x1","x2","y1","y2","Math","sqrt","rect","width","rectheight","height","type","labels","label","Number","labelvalue"],"mappings":"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","sourcesContent":["/**\r\n * svgm\r\n * https://github.com/mironcat/svgm\r\n *\r\n * Copyright (c) 2018 mironcat\r\n * Licensed under the MIT license.\r\n */\r\n'use strict';\r\nimport { getLabels } from './measures';\r\nfunction getGroups(SVG) {\r\n    /**\r\n     * iteration and check path, rects and lines for scalebar label\r\n     * then calculate scalefactor and return parent group for \r\n     * each scalebar.\r\n     * @SVG - svg.js instance\r\n     */\r\n    const paths = SVG.select('path').members;\r\n    let scalebars = scalebarIteration(paths);\r\n    const rects = SVG.select('rect').members;\r\n    let rectscalebars = scalebarIteration(rects);\r\n    if (rectscalebars) scalebars = scalebars.concat(rectscalebars);\r\n    const lines = SVG.select('line').members;\r\n    let linescalebars = scalebarIteration(lines);\r\n    if (linescalebars) scalebars = scalebars.concat(linescalebars);\r\n    let groups = [];\r\n    if (scalebars)\r\n        scalebars.forEach((scalebar) => {\r\n            var group = scalebar.item.parent();\r\n            groups.push({\r\n                group: group,\r\n                scalefactor: scalebar.scalefactor\r\n            });\r\n        });\r\n    return groups;\r\n\r\n}\r\nfunction scalebarIteration(items) {\r\n    /**\r\n     * Iteration through potencial scalebar elements \"items\" (path, rects and lines) \r\n     * and calulate scalefactor by scalebarFinder\r\n     */\r\n    let scalebars = [];\r\n    items.forEach((item) => {\r\n        var scalefactor = scalebarFinder(item);\r\n        if (scalefactor)\r\n            scalebars.push({\r\n                item: item,\r\n                scalefactor: scalefactor\r\n            });\r\n    });\r\n    return scalebars;\r\n}\r\nfunction scalebarFinder(item) {\r\n    let scalefactorConstructor = {\r\n        path(item, scalebarvalue) {\r\n            // body...\r\n\r\n            var d = item.node.getAttribute(\"d\");\r\n            var z = d.indexOf(\"z\");\r\n            var length = item.length();\r\n            if (z > 0) {\r\n                alert(\r\n                    \"Масштабный отрезок в виде закрытой кривой! Это может привести к ошибочным вычислениям.\" +\r\n                    \" Исправьте отрезок или используйте прямоугольник (rectangles) для масштабного отрезка\"\r\n                );\r\n                length = item.length() / 2;\r\n            }\r\n\r\n            return length / scalebarvalue;\r\n        },\r\n        line(item, scalebarvalue) {\r\n            // body...\r\n            var points = item.array().value;\r\n            var point1 = points[0];\r\n            var point2 = points[1];\r\n            var length = dist(point1, point2);\r\n            return length / scalebarvalue;\r\n            function dist(point1, point2) {\r\n                var x1 = point1[0],\r\n                    x2 = point2[0];\r\n                var y1 = point1[1],\r\n                    y2 = point2[1];\r\n                return Math.sqrt((x2 -= x1) * x2 + (y2 -= y1) * y2);\r\n            }\r\n        },\r\n        rect(item, scalebarvalue) {\r\n            // body...\r\n            var length = item.width(),\r\n                rectheight = item.height();\r\n            if (rectheight > length) length = rectheight;\r\n            return length / scalebarvalue;\r\n        }\r\n    };\r\n\r\n    // body... возвращает scalefactor или false\r\n    let type = item.type;\r\n    let labels = getLabels(item);\r\n    let label = labels.label;\r\n    if (label === 'scalebar') {\r\n        let scalebarvalue = Number(labels.labelvalue);\r\n        let scalefactor = scalefactorConstructor[type](item, scalebarvalue);\r\n        return scalefactor;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport { getGroups };"],"file":"groups.js"}